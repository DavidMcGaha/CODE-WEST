# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  versionprefix: 0.1.0

jobs:
  - job: 'BuildPackage'

    pool:
      vmImage: windows-latest

    variables:
      buildConfiguration: 'Release'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 5.0.100
        installationPath: $(Agent.ToolsDirectory)/dotnet

    #- task: NuGetCommand@2
    #  displayName: 'NuGet package restore for WEST.NET packages'
    #  inputs:
    #    command: 'restore'
    #    verbosityRestore: 'Detailed'
    #    restoreSolution: '**/WebWindow.Dev.sln'
    #    feedsToUse: 'select'
    #    vstsFeed: 'WEST (Formerly WebWindow)/WESTPackages'
    #    includeNuGetOrg: true

    - task: CmdLine@2
      displayName: 'Add NuGet source'
      inputs:
        script: 'dotnet nuget add source https://pkgs.dev.azure.com/eps-software/25138a24-91f3-4071-b9bd-4d7763ecb75f/_packaging/WESTPackages/nuget/v3/index.json -n DevOpsArtifacts'

    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'
      inputs:
        nuGetServiceConnections: 'WEST (Formerly WebWindow)/WESTPackages'
        #command: custom
        #arguments: sources update -Name "DevOpsArtifacts" -Username "this_value_could_anything" -Password "$(System.AccessToken)" -StorePasswordInClearText -ConfigFile "src/WebWindow/nuget.config"
      
    - task: CmdLine@2
      displayName: 'List NuGet sources'
      inputs:
        script: 'dotnet nuget list source'

    - task: CmdLine@2
      displayName: 'Build WEST.NET'
      inputs:
        script: 'dotnet build src/WebWindow/WebWindow.csproj -c $(buildConfiguration)'

    #Publish NuGet package to Artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'artifacts/WEST.NET.$(versionprefix)-$(Build.BuildNumber).nupkg'
        artifact: 'artifacts-combined'
    
    - task: NuGetAuthenticate@0
      displayName: 'NuGet Authenticate'
      inputs:
        nuGetServiceConnections: 'DevOpsArtifacts'

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        feedsToUse: 'select'
        publishVstsFeed: 'WEST (Formerly WebWindow)/WESTPackages'
        packagesToPush: 'artifacts/**/*.nupkg'
        allowPackageConflicts: true

  # Uploads the NuGet package file to nuget.org
  # Important notes:
  # 1. For this to work, you need to create a 'service connection' with the same name
  #    as the 'publishFeedCredentials' value.
  # 2. For security, you *must* ensure that 'Make secrets available to builds of forks'
  #    is disabled in your PR validation settings (inside build -> Edit -> Triggers).
  #    Otherwise, PRs would be able to push new packages even without being merged.
  #- job: 'PublishToNuGet'
  #  dependsOn: 'CombinePackages'
  #  steps:
  #  - task: DownloadBuildArtifacts@0
  #    inputs:
  #      downloadPath: 'artifacts'
  #      artifactName: 'artifacts-combined'
  #  - task: NuGetCommand@2
  #    displayName: 'Publish to nuget.org'
  #    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  #    inputs:
  #      command: push
  #      packagesToPush: 'artifacts/artifacts-combined/*.nupkg'
  #      nuGetFeedType: external
  #      publishFeedCredentials: 'WebWindowNuGet'
